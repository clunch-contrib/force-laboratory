<template>
    <a href="https://github.com/clunch-contrib/force-laboratory" target="_blank">Fork Me on Github</a>
    <h2>
        力图实验用例，基于
        <a href="https://hai2007.gitee.io/image2d/" target="_blank" rel="noopener noreferrer">image2D</a>
        开发，用于探索力图算法的最佳实践。
    </h2>
    <div id="painter"></div>
</template>
<script>

    import forceLayout from './force/index.js';
    import forceData from './assets/data.json';
    import $$ from 'image2d';

    import region from './region.js';
    $$.prototype.region = region;

    export default {
        mounted() {
            let force = forceLayout();

            // 配置
            force.config({
                center: 26,//中心力强度
                coulomb: 400,//库仑力缩小倍数
                spring: 200,//软棒系数
                scale: 0.24//组内绳子缩短程度
            });

            let canvas = $$('<canvas>非常抱歉，您的浏览器不支持canvas!</canvas>')
                .appendTo('#painter')
                .attr({
                    'width': 720,
                    'height': 520
                });

            // 获取图层管理对象
            let layer = canvas.layer(),

                // 绘制连线的图层画笔
                plink = layer.painter('link'),

                // 绘制结点的图层画笔
                pnode = layer.painter('node');

            // 准备好的不同类型结点的颜色
            let colors = ['#4CAF50', '#673AB7', '#CDDC39', '#F44336', '#0a4c80', '#9E9E9E',
                '#FF9800', '#795548', '#03A9F4', '#1b290b', '#fbe209'];

            // 建立区域管理对象
            let regionManager = canvas.region();

            plink.config({
                "strokeStyle": '#ccc',
                "lineWidth": 1.5
            });
            pnode.config({
                "strokeStyle": '#fff',
                "lineWidth": 5
            });

            force

                // 分析数据方法
                .bind('analyse', function (initnode) {
                    return [initnode.id, initnode.group];
                }, function (initlink) {
                    return [initlink.source, initlink.target, initlink.value + 240];
                })

                // 绘图方法
                .bind('update', function (node) {
                    pnode.beginPath()
                        .config('fillStyle', colors[node.orgData.group])
                        .arc(node.x * 0.7 + 10, node.y * 0.5 + 10, 5, 0, Math.PI * 2)
                        .stroke()
                        .fill();

                    // 修改区域
                    regionManager.drawer(node.id, function (painter) {
                        painter.arc(node.x * 0.7 + 10, node.y * 0.5 + 10, 5, 0, Math.PI * 2);
                        painter.fill();
                    });
                }, function (source, target, link) {
                    plink
                        .beginPath()
                        .moveTo(source.x * 0.7 + 10, source.y * 0.5 + 10)
                        .lineTo(target.x * 0.7 + 10, target.y * 0.5 + 10)
                        .stroke();
                })

                .bind('live', function () {
                    pnode.clearRect();
                    plink.clearRect();

                    // 擦除全部区域，恢复初始化
                    regionManager.erase(function (painter) {
                        painter.fillRect(0, 0, 720, 520);
                    });

                }, function () {
                    layer.update();
                });

            force(forceData.nodes, forceData.links);

            let region = undefined, p;

            $$('canvas')

                // 鼠标按下
                // 通过区域记录当前按下的是谁
                .bind('mousedown', function (event) {
                    event = event || window.event;

                    let temp = regionManager.getRegion(event);
                    if (temp)
                        region = temp[0];
                })

                // 鼠标放开
                // 当前通过区域标记谁被按下的记录，清空
                .bind('mouseup', function (event) {
                    event = event || window.event;
                    region = undefined;
                })

                // 鼠标移动
                // 不同的修改当前被区域记录下按下的结点
                .bind('mousemove', function (event) {
                    event = event || window.event;
                    if (region) {

                        p = $$('canvas').position(event);

                        // 由于有内容位置改变,需要通知力布局
                        force.update(region, (p.x - 10) / 7 * 10, (p.y - 10) * 2);

                        $$('canvas').css('cursor', 'pointer');
                    } else {
                        $$('canvas').css('cursor', 'default');
                    }
                });

        }
    };
</script>
<style>
    div {
        outline: 1px solid red;
        display: inline-block;
        margin: 10px;
    }

    [quickpaper] {
        position: relative;

        h2 {
            position: absolute;
            background-color: #cec8c8;
            color: white;
            padding: 5px 10px;
            font-size: 14px;
            right: 20px;
            top: 20px;
            user-select: none;
            box-shadow: -4px 4px 5px 1px #2b2828;

            &>a {
                text-decoration: underline;
                color: rgb(65, 121, 243);
                padding: 0 10px;
            }
        }

        &>a {
            user-select: none;
            position: fixed;
            transform: rotate(45deg);
            line-height: 1.6em;
            transform-origin: 150px 23px;
            text-align: center;
            font-family: sans-serif;
            display: inline-block;
            bottom: 53px;
            left: -91px;
            width: 300px;
            background-color: #03a9f4;
            outline: 4px solid #03a9f4;
            border: 2px dashed #ffffff;
            color: #ffffff;
        }
    }
</style>
